/**
 * user_service.proto
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserServiceUpdateSettingsBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserServiceUpdateSettingsBody::OAIUserServiceUpdateSettingsBody(QString json)
{
	this->initializeModel();
	this->fromJson(json);
}

OAIUserServiceUpdateSettingsBody::OAIUserServiceUpdateSettingsBody()
{
	this->initializeModel();
}

OAIUserServiceUpdateSettingsBody::~OAIUserServiceUpdateSettingsBody()
{
}

void OAIUserServiceUpdateSettingsBody::initializeModel()
{
	m_pomodoro_duration_isSet = false;
	m_pomodoro_duration_isValid = false;

	m_short_break_duration_isSet = false;
	m_short_break_duration_isValid = false;

	m_long_break_duration_isSet = false;
	m_long_break_duration_isValid = false;

	m_auto_start_short_break_isSet = false;
	m_auto_start_short_break_isValid = false;

	m_auto_start_long_break_isSet = false;
	m_auto_start_long_break_isValid = false;

	m_auto_start_pomodoro_isSet = false;
	m_auto_start_pomodoro_isValid = false;

	m_pomodoro_interval_isSet = false;
	m_pomodoro_interval_isValid = false;

	m_theme_isSet = false;
	m_theme_isValid = false;

	m_short_break_notification_isSet = false;
	m_short_break_notification_isValid = false;

	m_long_break_notification_isSet = false;
	m_long_break_notification_isValid = false;

	m_pomodoro_notification_isSet = false;
	m_pomodoro_notification_isValid = false;

	m_auto_start_music_isSet = false;
	m_auto_start_music_isValid = false;

	m_language_isSet = false;
	m_language_isValid = false;

	m_auto_start_next_task_isSet = false;
	m_auto_start_next_task_isValid = false;
}

void OAIUserServiceUpdateSettingsBody::fromJson(QString jsonString)
{
	QByteArray array(jsonString.toStdString().c_str());
	QJsonDocument doc = QJsonDocument::fromJson(array);
	QJsonObject jsonObject = doc.object();
	this->fromJsonObject(jsonObject);
}

void OAIUserServiceUpdateSettingsBody::fromJsonObject(QJsonObject json)
{
	m_pomodoro_duration_isValid = ::OpenAPI::fromJsonValue(
	    m_pomodoro_duration, json[QString("pomodoroDuration")]);
	m_pomodoro_duration_isSet =
	    !json[QString("pomodoroDuration")].isNull() && m_pomodoro_duration_isValid;

	m_short_break_duration_isValid = ::OpenAPI::fromJsonValue(
	    m_short_break_duration, json[QString("shortBreakDuration")]);
	m_short_break_duration_isSet =
	    !json[QString("shortBreakDuration")].isNull() && m_short_break_duration_isValid;

	m_long_break_duration_isValid = ::OpenAPI::fromJsonValue(
	    m_long_break_duration, json[QString("longBreakDuration")]);
	m_long_break_duration_isSet =
	    !json[QString("longBreakDuration")].isNull() && m_long_break_duration_isValid;

	m_auto_start_short_break_isValid = ::OpenAPI::fromJsonValue(
	    m_auto_start_short_break, json[QString("autoStartShortBreak")]);
	m_auto_start_short_break_isSet =
	    !json[QString("autoStartShortBreak")].isNull() && m_auto_start_short_break_isValid;

	m_auto_start_long_break_isValid = ::OpenAPI::fromJsonValue(
	    m_auto_start_long_break, json[QString("autoStartLongBreak")]);
	m_auto_start_long_break_isSet =
	    !json[QString("autoStartLongBreak")].isNull() && m_auto_start_long_break_isValid;

	m_auto_start_pomodoro_isValid = ::OpenAPI::fromJsonValue(
	    m_auto_start_pomodoro, json[QString("autoStartPomodoro")]);
	m_auto_start_pomodoro_isSet =
	    !json[QString("autoStartPomodoro")].isNull() && m_auto_start_pomodoro_isValid;

	m_pomodoro_interval_isValid = ::OpenAPI::fromJsonValue(
	    m_pomodoro_interval, json[QString("pomodoroInterval")]);
	m_pomodoro_interval_isSet =
	    !json[QString("pomodoroInterval")].isNull() && m_pomodoro_interval_isValid;

	m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
	m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;

	m_short_break_notification_isValid = ::OpenAPI::fromJsonValue(
	    m_short_break_notification, json[QString("shortBreakNotification")]);
	m_short_break_notification_isSet =
	    !json[QString("shortBreakNotification")].isNull() && m_short_break_notification_isValid;

	m_long_break_notification_isValid = ::OpenAPI::fromJsonValue(
	    m_long_break_notification, json[QString("longBreakNotification")]);
	m_long_break_notification_isSet =
	    !json[QString("longBreakNotification")].isNull() && m_long_break_notification_isValid;

	m_pomodoro_notification_isValid = ::OpenAPI::fromJsonValue(
	    m_pomodoro_notification, json[QString("pomodoroNotification")]);
	m_pomodoro_notification_isSet =
	    !json[QString("pomodoroNotification")].isNull() && m_pomodoro_notification_isValid;

	m_auto_start_music_isValid = ::OpenAPI::fromJsonValue(
	    m_auto_start_music, json[QString("autoStartMusic")]);
	m_auto_start_music_isSet =
	    !json[QString("autoStartMusic")].isNull() && m_auto_start_music_isValid;

	m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
	m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

	m_auto_start_next_task_isValid = ::OpenAPI::fromJsonValue(
	    m_auto_start_next_task, json[QString("autoStartNextTask")]);
	m_auto_start_next_task_isSet =
	    !json[QString("autoStartNextTask")].isNull() && m_auto_start_next_task_isValid;
}

QString OAIUserServiceUpdateSettingsBody::asJson() const
{
	QJsonObject obj = this->asJsonObject();
	QJsonDocument doc(obj);
	QByteArray bytes = doc.toJson();
	return QString(bytes);
}

QJsonObject OAIUserServiceUpdateSettingsBody::asJsonObject() const
{
	QJsonObject obj;
	if (m_pomodoro_duration_isSet) {
		obj.insert(QString("pomodoroDuration"), ::OpenAPI::toJsonValue(m_pomodoro_duration));
	}
	if (m_short_break_duration_isSet) {
		obj.insert(QString("shortBreakDuration"), ::OpenAPI::toJsonValue(m_short_break_duration));
	}
	if (m_long_break_duration_isSet) {
		obj.insert(QString("longBreakDuration"), ::OpenAPI::toJsonValue(m_long_break_duration));
	}
	if (m_auto_start_short_break_isSet) {
		obj.insert(QString("autoStartShortBreak"), ::OpenAPI::toJsonValue(m_auto_start_short_break));
	}
	if (m_auto_start_long_break_isSet) {
		obj.insert(QString("autoStartLongBreak"), ::OpenAPI::toJsonValue(m_auto_start_long_break));
	}
	if (m_auto_start_pomodoro_isSet) {
		obj.insert(QString("autoStartPomodoro"), ::OpenAPI::toJsonValue(m_auto_start_pomodoro));
	}
	if (m_pomodoro_interval_isSet) {
		obj.insert(QString("pomodoroInterval"), ::OpenAPI::toJsonValue(m_pomodoro_interval));
	}
	if (m_theme_isSet) {
		obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
	}
	if (m_short_break_notification_isSet) {
		obj.insert(
		    QString("shortBreakNotification"), ::OpenAPI::toJsonValue(m_short_break_notification));
	}
	if (m_long_break_notification_isSet) {
		obj.insert(
		    QString("longBreakNotification"), ::OpenAPI::toJsonValue(m_long_break_notification));
	}
	if (m_pomodoro_notification_isSet) {
		obj.insert(QString("pomodoroNotification"), ::OpenAPI::toJsonValue(m_pomodoro_notification));
	}
	if (m_auto_start_music_isSet) {
		obj.insert(QString("autoStartMusic"), ::OpenAPI::toJsonValue(m_auto_start_music));
	}
	if (m_language_isSet) {
		obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
	}
	if (m_auto_start_next_task_isSet) {
		obj.insert(QString("autoStartNextTask"), ::OpenAPI::toJsonValue(m_auto_start_next_task));
	}
	return obj;
}

qint32 OAIUserServiceUpdateSettingsBody::getPomodoroDuration() const
{
	return m_pomodoro_duration;
}

void OAIUserServiceUpdateSettingsBody::setPomodoroDuration(const qint32 &pomodoro_duration)
{
	m_pomodoro_duration = pomodoro_duration;
	m_pomodoro_duration_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_pomodoro_duration_Set() const
{
	return m_pomodoro_duration_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_pomodoro_duration_Valid() const
{
	return m_pomodoro_duration_isValid;
}

qint32 OAIUserServiceUpdateSettingsBody::getShortBreakDuration() const
{
	return m_short_break_duration;
}

void OAIUserServiceUpdateSettingsBody::setShortBreakDuration(const qint32 &short_break_duration)
{
	m_short_break_duration = short_break_duration;
	m_short_break_duration_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_short_break_duration_Set() const
{
	return m_short_break_duration_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_short_break_duration_Valid() const
{
	return m_short_break_duration_isValid;
}

qint32 OAIUserServiceUpdateSettingsBody::getLongBreakDuration() const
{
	return m_long_break_duration;
}

void OAIUserServiceUpdateSettingsBody::setLongBreakDuration(const qint32 &long_break_duration)
{
	m_long_break_duration = long_break_duration;
	m_long_break_duration_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_long_break_duration_Set() const
{
	return m_long_break_duration_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_long_break_duration_Valid() const
{
	return m_long_break_duration_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isAutoStartShortBreak() const
{
	return m_auto_start_short_break;
}

void OAIUserServiceUpdateSettingsBody::setAutoStartShortBreak(const bool &auto_start_short_break)
{
	m_auto_start_short_break = auto_start_short_break;
	m_auto_start_short_break_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_short_break_Set() const
{
	return m_auto_start_short_break_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_short_break_Valid() const
{
	return m_auto_start_short_break_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isAutoStartLongBreak() const
{
	return m_auto_start_long_break;
}

void OAIUserServiceUpdateSettingsBody::setAutoStartLongBreak(const bool &auto_start_long_break)
{
	m_auto_start_long_break = auto_start_long_break;
	m_auto_start_long_break_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_long_break_Set() const
{
	return m_auto_start_long_break_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_long_break_Valid() const
{
	return m_auto_start_long_break_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isAutoStartPomodoro() const
{
	return m_auto_start_pomodoro;
}

void OAIUserServiceUpdateSettingsBody::setAutoStartPomodoro(const bool &auto_start_pomodoro)
{
	m_auto_start_pomodoro = auto_start_pomodoro;
	m_auto_start_pomodoro_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_pomodoro_Set() const
{
	return m_auto_start_pomodoro_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_pomodoro_Valid() const
{
	return m_auto_start_pomodoro_isValid;
}

qint32 OAIUserServiceUpdateSettingsBody::getPomodoroInterval() const
{
	return m_pomodoro_interval;
}

void OAIUserServiceUpdateSettingsBody::setPomodoroInterval(const qint32 &pomodoro_interval)
{
	m_pomodoro_interval = pomodoro_interval;
	m_pomodoro_interval_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_pomodoro_interval_Set() const
{
	return m_pomodoro_interval_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_pomodoro_interval_Valid() const
{
	return m_pomodoro_interval_isValid;
}

QString OAIUserServiceUpdateSettingsBody::getTheme() const
{
	return m_theme;
}

void OAIUserServiceUpdateSettingsBody::setTheme(const QString &theme)
{
	m_theme = theme;
	m_theme_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_theme_Set() const
{
	return m_theme_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_theme_Valid() const
{
	return m_theme_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isShortBreakNotification() const
{
	return m_short_break_notification;
}

void OAIUserServiceUpdateSettingsBody::setShortBreakNotification(
    const bool &short_break_notification)
{
	m_short_break_notification = short_break_notification;
	m_short_break_notification_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_short_break_notification_Set() const
{
	return m_short_break_notification_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_short_break_notification_Valid() const
{
	return m_short_break_notification_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isLongBreakNotification() const
{
	return m_long_break_notification;
}

void OAIUserServiceUpdateSettingsBody::setLongBreakNotification(const bool &long_break_notification)
{
	m_long_break_notification = long_break_notification;
	m_long_break_notification_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_long_break_notification_Set() const
{
	return m_long_break_notification_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_long_break_notification_Valid() const
{
	return m_long_break_notification_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isPomodoroNotification() const
{
	return m_pomodoro_notification;
}

void OAIUserServiceUpdateSettingsBody::setPomodoroNotification(const bool &pomodoro_notification)
{
	m_pomodoro_notification = pomodoro_notification;
	m_pomodoro_notification_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_pomodoro_notification_Set() const
{
	return m_pomodoro_notification_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_pomodoro_notification_Valid() const
{
	return m_pomodoro_notification_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isAutoStartMusic() const
{
	return m_auto_start_music;
}

void OAIUserServiceUpdateSettingsBody::setAutoStartMusic(const bool &auto_start_music)
{
	m_auto_start_music = auto_start_music;
	m_auto_start_music_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_music_Set() const
{
	return m_auto_start_music_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_music_Valid() const
{
	return m_auto_start_music_isValid;
}

QString OAIUserServiceUpdateSettingsBody::getLanguage() const
{
	return m_language;
}

void OAIUserServiceUpdateSettingsBody::setLanguage(const QString &language)
{
	m_language = language;
	m_language_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_language_Set() const
{
	return m_language_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_language_Valid() const
{
	return m_language_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isAutoStartNextTask() const
{
	return m_auto_start_next_task;
}

void OAIUserServiceUpdateSettingsBody::setAutoStartNextTask(const bool &auto_start_next_task)
{
	m_auto_start_next_task = auto_start_next_task;
	m_auto_start_next_task_isSet = true;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_next_task_Set() const
{
	return m_auto_start_next_task_isSet;
}

bool OAIUserServiceUpdateSettingsBody::is_auto_start_next_task_Valid() const
{
	return m_auto_start_next_task_isValid;
}

bool OAIUserServiceUpdateSettingsBody::isSet() const
{
	bool isObjectUpdated = false;
	do {
		if (m_pomodoro_duration_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_short_break_duration_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_long_break_duration_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_auto_start_short_break_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_auto_start_long_break_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_auto_start_pomodoro_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_pomodoro_interval_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_theme_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_short_break_notification_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_long_break_notification_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_pomodoro_notification_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_auto_start_music_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_language_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_auto_start_next_task_isSet) {
			isObjectUpdated = true;
			break;
		}
	} while (false);
	return isObjectUpdated;
}

bool OAIUserServiceUpdateSettingsBody::isValid() const
{
	// only required properties are required for the object to be considered valid
	return true;
}

} // namespace OpenAPI
