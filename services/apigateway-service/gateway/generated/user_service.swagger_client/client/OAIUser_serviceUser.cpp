/**
 * user_service.proto
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_serviceUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_serviceUser::OAIUser_serviceUser(QString json)
{
	this->initializeModel();
	this->fromJson(json);
}

OAIUser_serviceUser::OAIUser_serviceUser()
{
	this->initializeModel();
}

OAIUser_serviceUser::~OAIUser_serviceUser()
{
}

void OAIUser_serviceUser::initializeModel()
{
	m_user_id_isSet = false;
	m_user_id_isValid = false;

	m_email_isSet = false;
	m_email_isValid = false;

	m_username_isSet = false;
	m_username_isValid = false;

	m_created_at_isSet = false;
	m_created_at_isValid = false;

	m_updated_at_isSet = false;
	m_updated_at_isValid = false;
}

void OAIUser_serviceUser::fromJson(QString jsonString)
{
	QByteArray array(jsonString.toStdString().c_str());
	QJsonDocument doc = QJsonDocument::fromJson(array);
	QJsonObject jsonObject = doc.object();
	this->fromJsonObject(jsonObject);
}

void OAIUser_serviceUser::fromJsonObject(QJsonObject json)
{
	m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
	m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

	m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
	m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

	m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
	m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

	m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
	m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

	m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
	m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIUser_serviceUser::asJson() const
{
	QJsonObject obj = this->asJsonObject();
	QJsonDocument doc(obj);
	QByteArray bytes = doc.toJson();
	return QString(bytes);
}

QJsonObject OAIUser_serviceUser::asJsonObject() const
{
	QJsonObject obj;
	if (m_user_id_isSet) {
		obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
	}
	if (m_email_isSet) {
		obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
	}
	if (m_username_isSet) {
		obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
	}
	if (m_created_at_isSet) {
		obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
	}
	if (m_updated_at_isSet) {
		obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
	}
	return obj;
}

QString OAIUser_serviceUser::getUserId() const
{
	return m_user_id;
}

void OAIUser_serviceUser::setUserId(const QString &user_id)
{
	m_user_id = user_id;
	m_user_id_isSet = true;
}

bool OAIUser_serviceUser::is_user_id_Set() const
{
	return m_user_id_isSet;
}

bool OAIUser_serviceUser::is_user_id_Valid() const
{
	return m_user_id_isValid;
}

QString OAIUser_serviceUser::getEmail() const
{
	return m_email;
}

void OAIUser_serviceUser::setEmail(const QString &email)
{
	m_email = email;
	m_email_isSet = true;
}

bool OAIUser_serviceUser::is_email_Set() const
{
	return m_email_isSet;
}

bool OAIUser_serviceUser::is_email_Valid() const
{
	return m_email_isValid;
}

QString OAIUser_serviceUser::getUsername() const
{
	return m_username;
}

void OAIUser_serviceUser::setUsername(const QString &username)
{
	m_username = username;
	m_username_isSet = true;
}

bool OAIUser_serviceUser::is_username_Set() const
{
	return m_username_isSet;
}

bool OAIUser_serviceUser::is_username_Valid() const
{
	return m_username_isValid;
}

QDateTime OAIUser_serviceUser::getCreatedAt() const
{
	return m_created_at;
}

void OAIUser_serviceUser::setCreatedAt(const QDateTime &created_at)
{
	m_created_at = created_at;
	m_created_at_isSet = true;
}

bool OAIUser_serviceUser::is_created_at_Set() const
{
	return m_created_at_isSet;
}

bool OAIUser_serviceUser::is_created_at_Valid() const
{
	return m_created_at_isValid;
}

QDateTime OAIUser_serviceUser::getUpdatedAt() const
{
	return m_updated_at;
}

void OAIUser_serviceUser::setUpdatedAt(const QDateTime &updated_at)
{
	m_updated_at = updated_at;
	m_updated_at_isSet = true;
}

bool OAIUser_serviceUser::is_updated_at_Set() const
{
	return m_updated_at_isSet;
}

bool OAIUser_serviceUser::is_updated_at_Valid() const
{
	return m_updated_at_isValid;
}

bool OAIUser_serviceUser::isSet() const
{
	bool isObjectUpdated = false;
	do {
		if (m_user_id_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_email_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_username_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_created_at_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_updated_at_isSet) {
			isObjectUpdated = true;
			break;
		}
	} while (false);
	return isObjectUpdated;
}

bool OAIUser_serviceUser::isValid() const
{
	// only required properties are required for the object to be considered valid
	return true;
}

} // namespace OpenAPI
