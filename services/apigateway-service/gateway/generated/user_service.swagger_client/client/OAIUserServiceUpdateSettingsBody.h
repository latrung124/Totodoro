/**
 * user_service.proto
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserServiceUpdateSettingsBody.h
 *
 *
 */

#ifndef OAIUserServiceUpdateSettingsBody_H
#define OAIUserServiceUpdateSettingsBody_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserServiceUpdateSettingsBody : public OAIObject
{
public:
	OAIUserServiceUpdateSettingsBody();
	OAIUserServiceUpdateSettingsBody(QString json);
	~OAIUserServiceUpdateSettingsBody() override;

	QString asJson() const override;
	QJsonObject asJsonObject() const override;
	void fromJsonObject(QJsonObject json) override;
	void fromJson(QString jsonString) override;

	qint32 getPomodoroDuration() const;
	void setPomodoroDuration(const qint32 &pomodoro_duration);
	bool is_pomodoro_duration_Set() const;
	bool is_pomodoro_duration_Valid() const;

	qint32 getShortBreakDuration() const;
	void setShortBreakDuration(const qint32 &short_break_duration);
	bool is_short_break_duration_Set() const;
	bool is_short_break_duration_Valid() const;

	qint32 getLongBreakDuration() const;
	void setLongBreakDuration(const qint32 &long_break_duration);
	bool is_long_break_duration_Set() const;
	bool is_long_break_duration_Valid() const;

	bool isAutoStartShortBreak() const;
	void setAutoStartShortBreak(const bool &auto_start_short_break);
	bool is_auto_start_short_break_Set() const;
	bool is_auto_start_short_break_Valid() const;

	bool isAutoStartLongBreak() const;
	void setAutoStartLongBreak(const bool &auto_start_long_break);
	bool is_auto_start_long_break_Set() const;
	bool is_auto_start_long_break_Valid() const;

	bool isAutoStartPomodoro() const;
	void setAutoStartPomodoro(const bool &auto_start_pomodoro);
	bool is_auto_start_pomodoro_Set() const;
	bool is_auto_start_pomodoro_Valid() const;

	qint32 getPomodoroInterval() const;
	void setPomodoroInterval(const qint32 &pomodoro_interval);
	bool is_pomodoro_interval_Set() const;
	bool is_pomodoro_interval_Valid() const;

	QString getTheme() const;
	void setTheme(const QString &theme);
	bool is_theme_Set() const;
	bool is_theme_Valid() const;

	bool isShortBreakNotification() const;
	void setShortBreakNotification(const bool &short_break_notification);
	bool is_short_break_notification_Set() const;
	bool is_short_break_notification_Valid() const;

	bool isLongBreakNotification() const;
	void setLongBreakNotification(const bool &long_break_notification);
	bool is_long_break_notification_Set() const;
	bool is_long_break_notification_Valid() const;

	bool isPomodoroNotification() const;
	void setPomodoroNotification(const bool &pomodoro_notification);
	bool is_pomodoro_notification_Set() const;
	bool is_pomodoro_notification_Valid() const;

	bool isAutoStartMusic() const;
	void setAutoStartMusic(const bool &auto_start_music);
	bool is_auto_start_music_Set() const;
	bool is_auto_start_music_Valid() const;

	QString getLanguage() const;
	void setLanguage(const QString &language);
	bool is_language_Set() const;
	bool is_language_Valid() const;

	bool isAutoStartNextTask() const;
	void setAutoStartNextTask(const bool &auto_start_next_task);
	bool is_auto_start_next_task_Set() const;
	bool is_auto_start_next_task_Valid() const;

	virtual bool isSet() const override;
	virtual bool isValid() const override;

private:
	void initializeModel();

	qint32 m_pomodoro_duration;
	bool m_pomodoro_duration_isSet;
	bool m_pomodoro_duration_isValid;

	qint32 m_short_break_duration;
	bool m_short_break_duration_isSet;
	bool m_short_break_duration_isValid;

	qint32 m_long_break_duration;
	bool m_long_break_duration_isSet;
	bool m_long_break_duration_isValid;

	bool m_auto_start_short_break;
	bool m_auto_start_short_break_isSet;
	bool m_auto_start_short_break_isValid;

	bool m_auto_start_long_break;
	bool m_auto_start_long_break_isSet;
	bool m_auto_start_long_break_isValid;

	bool m_auto_start_pomodoro;
	bool m_auto_start_pomodoro_isSet;
	bool m_auto_start_pomodoro_isValid;

	qint32 m_pomodoro_interval;
	bool m_pomodoro_interval_isSet;
	bool m_pomodoro_interval_isValid;

	QString m_theme;
	bool m_theme_isSet;
	bool m_theme_isValid;

	bool m_short_break_notification;
	bool m_short_break_notification_isSet;
	bool m_short_break_notification_isValid;

	bool m_long_break_notification;
	bool m_long_break_notification_isSet;
	bool m_long_break_notification_isValid;

	bool m_pomodoro_notification;
	bool m_pomodoro_notification_isSet;
	bool m_pomodoro_notification_isValid;

	bool m_auto_start_music;
	bool m_auto_start_music_isSet;
	bool m_auto_start_music_isValid;

	QString m_language;
	bool m_language_isSet;
	bool m_language_isValid;

	bool m_auto_start_next_task;
	bool m_auto_start_next_task_isSet;
	bool m_auto_start_next_task_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserServiceUpdateSettingsBody)

#endif // OAIUserServiceUpdateSettingsBody_H
