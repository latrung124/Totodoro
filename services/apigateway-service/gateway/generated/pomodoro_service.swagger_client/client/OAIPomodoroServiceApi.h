/**
 * pomodoro_service.proto
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPomodoroServiceApi_H
#define OAI_OAIPomodoroServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIOauth.h"
#include "OAIServerConfiguration.h"

#include "OAIPomodoro_serviceCreateSessionResponse.h"
#include "OAIPomodoro_serviceDeleteSessionResponse.h"
#include "OAIPomodoro_serviceGetSessionByIdResponse.h"
#include "OAIPomodoro_serviceGetSessionsResponse.h"
#include "OAIPomodoro_serviceUpdateSessionResponse.h"
#include "OAIPomodoroServiceCreateSessionBody.h"
#include "OAIPomodoroServiceUpdateSessionBody.h"
#include "OAIRpcStatus.h"
#include <QString>

#include <QByteArray>
#include <QList>
#include <QNetworkAccessManager>
#include <QObject>
#include <QStringList>

namespace OpenAPI {

class OAIPomodoroServiceApi : public QObject
{
	Q_OBJECT

public:
	OAIPomodoroServiceApi(const int timeOut = 0);
	~OAIPomodoroServiceApi();

	void initializeServerConfigs();
	int setDefaultServerValue(
	    int serverIndex, const QString &operation, const QString &variable, const QString &val);
	void setServerIndex(const QString &operation, int serverIndex);
	void setApiKey(const QString &apiKeyName, const QString &apiKey);
	void setBearerToken(const QString &token);
	void setUsername(const QString &username);
	void setPassword(const QString &password);
	void setTimeOut(const int timeOut);
	void setWorkingDirectory(const QString &path);
	void setNetworkAccessManager(QNetworkAccessManager *manager);
	int addServerConfiguration(
	    const QString &operation,
	    const QUrl &url,
	    const QString &description = "",
	    const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
	void setNewServerForAllOperations(
	    const QUrl &url,
	    const QString &description = "",
	    const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
	void setNewServer(
	    const QString &operation,
	    const QUrl &url,
	    const QString &description = "",
	    const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
	void addHeaders(const QString &key, const QString &value);
	void enableRequestCompression();
	void enableResponseCompression();
	void abortRequests();
	QString getParamStylePrefix(const QString &style);
	QString getParamStyleSuffix(const QString &style);
	QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

	/**
	 * @param[in]  user_id QString [required]
	 * @param[in]  body OAIPomodoroServiceCreateSessionBody [required]
	 */
	void pomodoroServiceCreateSession(
	    const QString &user_id, const OAIPomodoroServiceCreateSessionBody &body);

	/**
	 * @param[in]  session_id QString [required]
	 */
	void pomodoroServiceDeleteSession(const QString &session_id);

	/**
	 * @param[in]  session_id QString [required]
	 */
	void pomodoroServiceGetSessionById(const QString &session_id);

	/**
	 * @param[in]  user_id QString [required]
	 * @param[in]  task_id QString [optional]
	 */
	void pomodoroServiceGetSessions(
	    const QString &user_id,
	    const ::OpenAPI::OptionalParam<QString> &task_id = ::OpenAPI::OptionalParam<QString>());

	/**
	 * @param[in]  session_id QString [required]
	 * @param[in]  body OAIPomodoroServiceUpdateSessionBody [required]
	 */
	void pomodoroServiceUpdateSession(
	    const QString &session_id, const OAIPomodoroServiceUpdateSessionBody &body);

private:
	QMap<QString, int> _serverIndices;
	QMap<QString, QList<OAIServerConfiguration>> _serverConfigs;
	QMap<QString, QString> _apiKeys;
	QString _bearerToken;
	QString _username;
	QString _password;
	int _timeOut;
	QString _workingDirectory;
	QNetworkAccessManager *_manager;
	QMap<QString, QString> _defaultHeaders;
	bool _isResponseCompressionEnabled;
	bool _isRequestCompressionEnabled;
	OAIHttpRequestInput _latestInput;
	OAIHttpRequestWorker *_latestWorker;
	QStringList _latestScope;
	OauthCode _authFlow;
	OauthImplicit _implicitFlow;
	OauthCredentials _credentialFlow;
	OauthPassword _passwordFlow;
	int _OauthMethod = 0;

	void pomodoroServiceCreateSessionCallback(OAIHttpRequestWorker *worker);
	void pomodoroServiceDeleteSessionCallback(OAIHttpRequestWorker *worker);
	void pomodoroServiceGetSessionByIdCallback(OAIHttpRequestWorker *worker);
	void pomodoroServiceGetSessionsCallback(OAIHttpRequestWorker *worker);
	void pomodoroServiceUpdateSessionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

	void pomodoroServiceCreateSessionSignal(OAIPomodoro_serviceCreateSessionResponse summary);
	void pomodoroServiceDeleteSessionSignal(OAIPomodoro_serviceDeleteSessionResponse summary);
	void pomodoroServiceGetSessionByIdSignal(OAIPomodoro_serviceGetSessionByIdResponse summary);
	void pomodoroServiceGetSessionsSignal(OAIPomodoro_serviceGetSessionsResponse summary);
	void pomodoroServiceUpdateSessionSignal(OAIPomodoro_serviceUpdateSessionResponse summary);

	void pomodoroServiceCreateSessionSignalFull(
	    OAIHttpRequestWorker *worker, OAIPomodoro_serviceCreateSessionResponse summary);
	void pomodoroServiceDeleteSessionSignalFull(
	    OAIHttpRequestWorker *worker, OAIPomodoro_serviceDeleteSessionResponse summary);
	void pomodoroServiceGetSessionByIdSignalFull(
	    OAIHttpRequestWorker *worker, OAIPomodoro_serviceGetSessionByIdResponse summary);
	void pomodoroServiceGetSessionsSignalFull(
	    OAIHttpRequestWorker *worker, OAIPomodoro_serviceGetSessionsResponse summary);
	void pomodoroServiceUpdateSessionSignalFull(
	    OAIHttpRequestWorker *worker, OAIPomodoro_serviceUpdateSessionResponse summary);

	Q_DECL_DEPRECATED_X("Use pomodoroServiceCreateSessionSignalError() instead")
	void pomodoroServiceCreateSessionSignalE(
	    OAIPomodoro_serviceCreateSessionResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void pomodoroServiceCreateSessionSignalError(
	    OAIPomodoro_serviceCreateSessionResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceDeleteSessionSignalError() instead")
	void pomodoroServiceDeleteSessionSignalE(
	    OAIPomodoro_serviceDeleteSessionResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void pomodoroServiceDeleteSessionSignalError(
	    OAIPomodoro_serviceDeleteSessionResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceGetSessionByIdSignalError() instead")
	void pomodoroServiceGetSessionByIdSignalE(
	    OAIPomodoro_serviceGetSessionByIdResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void pomodoroServiceGetSessionByIdSignalError(
	    OAIPomodoro_serviceGetSessionByIdResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceGetSessionsSignalError() instead")
	void pomodoroServiceGetSessionsSignalE(
	    OAIPomodoro_serviceGetSessionsResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void pomodoroServiceGetSessionsSignalError(
	    OAIPomodoro_serviceGetSessionsResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceUpdateSessionSignalError() instead")
	void pomodoroServiceUpdateSessionSignalE(
	    OAIPomodoro_serviceUpdateSessionResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void pomodoroServiceUpdateSessionSignalError(
	    OAIPomodoro_serviceUpdateSessionResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);

	Q_DECL_DEPRECATED_X("Use pomodoroServiceCreateSessionSignalErrorFull() instead")
	void pomodoroServiceCreateSessionSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void pomodoroServiceCreateSessionSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceDeleteSessionSignalErrorFull() instead")
	void pomodoroServiceDeleteSessionSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void pomodoroServiceDeleteSessionSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceGetSessionByIdSignalErrorFull() instead")
	void pomodoroServiceGetSessionByIdSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void pomodoroServiceGetSessionByIdSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceGetSessionsSignalErrorFull() instead")
	void pomodoroServiceGetSessionsSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void pomodoroServiceGetSessionsSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use pomodoroServiceUpdateSessionSignalErrorFull() instead")
	void pomodoroServiceUpdateSessionSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void pomodoroServiceUpdateSessionSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);

	void abortRequestsSignal();
	void allPendingRequestsCompleted();

public Q_SLOTS:
	void tokenAvailable();
};

} // namespace OpenAPI
#endif
