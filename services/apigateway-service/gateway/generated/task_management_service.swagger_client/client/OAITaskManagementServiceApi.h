/**
 * task_management_service.proto
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskManagementServiceApi_H
#define OAI_OAITaskManagementServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIOauth.h"
#include "OAIServerConfiguration.h"

#include "OAIRpcStatus.h"
#include "OAITask_managementCreateTaskGroupRequest.h"
#include "OAITask_managementCreateTaskGroupResponse.h"
#include "OAITask_managementCreateTaskResponse.h"
#include "OAITask_managementDeleteTaskGroupResponse.h"
#include "OAITask_managementDeleteTaskResponse.h"
#include "OAITask_managementGetTaskGroupsResponse.h"
#include "OAITask_managementGetTasksResponse.h"
#include "OAITask_managementUpdateTaskGroupResponse.h"
#include "OAITask_managementUpdateTaskResponse.h"
#include "OAITaskManagementServiceCreateTaskBody.h"
#include "OAITaskManagementServiceUpdateTaskBody.h"
#include "OAITaskManagementServiceUpdateTaskGroupBody.h"
#include <QString>

#include <QByteArray>
#include <QList>
#include <QNetworkAccessManager>
#include <QObject>
#include <QStringList>

namespace OpenAPI {

class OAITaskManagementServiceApi : public QObject
{
	Q_OBJECT

public:
	OAITaskManagementServiceApi(const int timeOut = 0);
	~OAITaskManagementServiceApi();

	void initializeServerConfigs();
	int setDefaultServerValue(
	    int serverIndex, const QString &operation, const QString &variable, const QString &val);
	void setServerIndex(const QString &operation, int serverIndex);
	void setApiKey(const QString &apiKeyName, const QString &apiKey);
	void setBearerToken(const QString &token);
	void setUsername(const QString &username);
	void setPassword(const QString &password);
	void setTimeOut(const int timeOut);
	void setWorkingDirectory(const QString &path);
	void setNetworkAccessManager(QNetworkAccessManager *manager);
	int addServerConfiguration(
	    const QString &operation,
	    const QUrl &url,
	    const QString &description = "",
	    const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
	void setNewServerForAllOperations(
	    const QUrl &url,
	    const QString &description = "",
	    const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
	void setNewServer(
	    const QString &operation,
	    const QUrl &url,
	    const QString &description = "",
	    const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
	void addHeaders(const QString &key, const QString &value);
	void enableRequestCompression();
	void enableResponseCompression();
	void abortRequests();
	QString getParamStylePrefix(const QString &style);
	QString getParamStyleSuffix(const QString &style);
	QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

	/**
	 * @param[in]  group_id QString [required]
	 * @param[in]  body OAITaskManagementServiceCreateTaskBody [required]
	 */
	void taskManagementServiceCreateTask(
	    const QString &group_id, const OAITaskManagementServiceCreateTaskBody &body);

	/**
	 * @param[in]  body OAITask_managementCreateTaskGroupRequest [required]
	 */
	void taskManagementServiceCreateTaskGroup(const OAITask_managementCreateTaskGroupRequest &body);

	/**
	 * @param[in]  task_id QString [required]
	 */
	void taskManagementServiceDeleteTask(const QString &task_id);

	/**
	 * @param[in]  group_id QString [required]
	 */
	void taskManagementServiceDeleteTaskGroup(const QString &group_id);

	/**
	 * @param[in]  user_id QString [required]
	 */
	void taskManagementServiceGetTaskGroups(const QString &user_id);

	/**
	 * @param[in]  user_id QString [required]
	 * @param[in]  group_id QString [optional]
	 */
	void taskManagementServiceGetTasks(
	    const QString &user_id,
	    const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

	/**
	 * @param[in]  group_id QString [required]
	 * @param[in]  user_id QString [optional]
	 */
	void taskManagementServiceGetTasks2(
	    const QString &group_id,
	    const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

	/**
	 * @param[in]  task_id QString [required]
	 * @param[in]  body OAITaskManagementServiceUpdateTaskBody [required]
	 */
	void taskManagementServiceUpdateTask(
	    const QString &task_id, const OAITaskManagementServiceUpdateTaskBody &body);

	/**
	 * @param[in]  group_id QString [required]
	 * @param[in]  body OAITaskManagementServiceUpdateTaskGroupBody [required]
	 */
	void taskManagementServiceUpdateTaskGroup(
	    const QString &group_id, const OAITaskManagementServiceUpdateTaskGroupBody &body);

private:
	QMap<QString, int> _serverIndices;
	QMap<QString, QList<OAIServerConfiguration>> _serverConfigs;
	QMap<QString, QString> _apiKeys;
	QString _bearerToken;
	QString _username;
	QString _password;
	int _timeOut;
	QString _workingDirectory;
	QNetworkAccessManager *_manager;
	QMap<QString, QString> _defaultHeaders;
	bool _isResponseCompressionEnabled;
	bool _isRequestCompressionEnabled;
	OAIHttpRequestInput _latestInput;
	OAIHttpRequestWorker *_latestWorker;
	QStringList _latestScope;
	OauthCode _authFlow;
	OauthImplicit _implicitFlow;
	OauthCredentials _credentialFlow;
	OauthPassword _passwordFlow;
	int _OauthMethod = 0;

	void taskManagementServiceCreateTaskCallback(OAIHttpRequestWorker *worker);
	void taskManagementServiceCreateTaskGroupCallback(OAIHttpRequestWorker *worker);
	void taskManagementServiceDeleteTaskCallback(OAIHttpRequestWorker *worker);
	void taskManagementServiceDeleteTaskGroupCallback(OAIHttpRequestWorker *worker);
	void taskManagementServiceGetTaskGroupsCallback(OAIHttpRequestWorker *worker);
	void taskManagementServiceGetTasksCallback(OAIHttpRequestWorker *worker);
	void taskManagementServiceGetTasks2Callback(OAIHttpRequestWorker *worker);
	void taskManagementServiceUpdateTaskCallback(OAIHttpRequestWorker *worker);
	void taskManagementServiceUpdateTaskGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

	void taskManagementServiceCreateTaskSignal(OAITask_managementCreateTaskResponse summary);
	void taskManagementServiceCreateTaskGroupSignal(
	    OAITask_managementCreateTaskGroupResponse summary);
	void taskManagementServiceDeleteTaskSignal(OAITask_managementDeleteTaskResponse summary);
	void taskManagementServiceDeleteTaskGroupSignal(
	    OAITask_managementDeleteTaskGroupResponse summary);
	void taskManagementServiceGetTaskGroupsSignal(OAITask_managementGetTaskGroupsResponse summary);
	void taskManagementServiceGetTasksSignal(OAITask_managementGetTasksResponse summary);
	void taskManagementServiceGetTasks2Signal(OAITask_managementGetTasksResponse summary);
	void taskManagementServiceUpdateTaskSignal(OAITask_managementUpdateTaskResponse summary);
	void taskManagementServiceUpdateTaskGroupSignal(
	    OAITask_managementUpdateTaskGroupResponse summary);

	void taskManagementServiceCreateTaskSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementCreateTaskResponse summary);
	void taskManagementServiceCreateTaskGroupSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementCreateTaskGroupResponse summary);
	void taskManagementServiceDeleteTaskSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementDeleteTaskResponse summary);
	void taskManagementServiceDeleteTaskGroupSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementDeleteTaskGroupResponse summary);
	void taskManagementServiceGetTaskGroupsSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementGetTaskGroupsResponse summary);
	void taskManagementServiceGetTasksSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementGetTasksResponse summary);
	void taskManagementServiceGetTasks2SignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementGetTasksResponse summary);
	void taskManagementServiceUpdateTaskSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementUpdateTaskResponse summary);
	void taskManagementServiceUpdateTaskGroupSignalFull(
	    OAIHttpRequestWorker *worker, OAITask_managementUpdateTaskGroupResponse summary);

	Q_DECL_DEPRECATED_X("Use taskManagementServiceCreateTaskSignalError() instead")
	void taskManagementServiceCreateTaskSignalE(
	    OAITask_managementCreateTaskResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceCreateTaskSignalError(
	    OAITask_managementCreateTaskResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceCreateTaskGroupSignalError() instead")
	void taskManagementServiceCreateTaskGroupSignalE(
	    OAITask_managementCreateTaskGroupResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceCreateTaskGroupSignalError(
	    OAITask_managementCreateTaskGroupResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceDeleteTaskSignalError() instead")
	void taskManagementServiceDeleteTaskSignalE(
	    OAITask_managementDeleteTaskResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceDeleteTaskSignalError(
	    OAITask_managementDeleteTaskResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceDeleteTaskGroupSignalError() instead")
	void taskManagementServiceDeleteTaskGroupSignalE(
	    OAITask_managementDeleteTaskGroupResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceDeleteTaskGroupSignalError(
	    OAITask_managementDeleteTaskGroupResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceGetTaskGroupsSignalError() instead")
	void taskManagementServiceGetTaskGroupsSignalE(
	    OAITask_managementGetTaskGroupsResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceGetTaskGroupsSignalError(
	    OAITask_managementGetTaskGroupsResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceGetTasksSignalError() instead")
	void taskManagementServiceGetTasksSignalE(
	    OAITask_managementGetTasksResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceGetTasksSignalError(
	    OAITask_managementGetTasksResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceGetTasks2SignalError() instead")
	void taskManagementServiceGetTasks2SignalE(
	    OAITask_managementGetTasksResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceGetTasks2SignalError(
	    OAITask_managementGetTasksResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceUpdateTaskSignalError() instead")
	void taskManagementServiceUpdateTaskSignalE(
	    OAITask_managementUpdateTaskResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceUpdateTaskSignalError(
	    OAITask_managementUpdateTaskResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceUpdateTaskGroupSignalError() instead")
	void taskManagementServiceUpdateTaskGroupSignalE(
	    OAITask_managementUpdateTaskGroupResponse summary,
	    QNetworkReply::NetworkError error_type,
	    QString error_str);
	void taskManagementServiceUpdateTaskGroupSignalError(
	    OAITask_managementUpdateTaskGroupResponse summary,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);

	Q_DECL_DEPRECATED_X("Use taskManagementServiceCreateTaskSignalErrorFull() instead")
	void taskManagementServiceCreateTaskSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceCreateTaskSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceCreateTaskGroupSignalErrorFull() instead")
	void taskManagementServiceCreateTaskGroupSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceCreateTaskGroupSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceDeleteTaskSignalErrorFull() instead")
	void taskManagementServiceDeleteTaskSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceDeleteTaskSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceDeleteTaskGroupSignalErrorFull() instead")
	void taskManagementServiceDeleteTaskGroupSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceDeleteTaskGroupSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceGetTaskGroupsSignalErrorFull() instead")
	void taskManagementServiceGetTaskGroupsSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceGetTaskGroupsSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceGetTasksSignalErrorFull() instead")
	void taskManagementServiceGetTasksSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceGetTasksSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceGetTasks2SignalErrorFull() instead")
	void taskManagementServiceGetTasks2SignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceGetTasks2SignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceUpdateTaskSignalErrorFull() instead")
	void taskManagementServiceUpdateTaskSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceUpdateTaskSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);
	Q_DECL_DEPRECATED_X("Use taskManagementServiceUpdateTaskGroupSignalErrorFull() instead")
	void taskManagementServiceUpdateTaskGroupSignalEFull(
	    OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
	void taskManagementServiceUpdateTaskGroupSignalErrorFull(
	    OAIHttpRequestWorker *worker,
	    QNetworkReply::NetworkError error_type,
	    const QString &error_str);

	void abortRequestsSignal();
	void allPendingRequestsCompleted();

public Q_SLOTS:
	void tokenAvailable();
};

} // namespace OpenAPI
#endif
