/**
 * task_management_service.proto
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask_managementTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask_managementTask::OAITask_managementTask(QString json)
{
	this->initializeModel();
	this->fromJson(json);
}

OAITask_managementTask::OAITask_managementTask()
{
	this->initializeModel();
}

OAITask_managementTask::~OAITask_managementTask()
{
}

void OAITask_managementTask::initializeModel()
{
	m_task_id_isSet = false;
	m_task_id_isValid = false;

	m_user_id_isSet = false;
	m_user_id_isValid = false;

	m_group_id_isSet = false;
	m_group_id_isValid = false;

	m_icon_isSet = false;
	m_icon_isValid = false;

	m_name_isSet = false;
	m_name_isValid = false;

	m_description_isSet = false;
	m_description_isValid = false;

	m_completed_pomodoros_isSet = false;
	m_completed_pomodoros_isValid = false;

	m_total_pomodoros_isSet = false;
	m_total_pomodoros_isValid = false;

	m_progress_isSet = false;
	m_progress_isValid = false;

	m_priority_isSet = false;
	m_priority_isValid = false;

	m_status_isSet = false;
	m_status_isValid = false;

	m_deadline_isSet = false;
	m_deadline_isValid = false;

	m_created_at_isSet = false;
	m_created_at_isValid = false;

	m_updated_at_isSet = false;
	m_updated_at_isValid = false;
}

void OAITask_managementTask::fromJson(QString jsonString)
{
	QByteArray array(jsonString.toStdString().c_str());
	QJsonDocument doc = QJsonDocument::fromJson(array);
	QJsonObject jsonObject = doc.object();
	this->fromJsonObject(jsonObject);
}

void OAITask_managementTask::fromJsonObject(QJsonObject json)
{
	m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
	m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

	m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
	m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

	m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
	m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

	m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
	m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

	m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
	m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

	m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
	m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

	m_completed_pomodoros_isValid = ::OpenAPI::fromJsonValue(
	    m_completed_pomodoros, json[QString("completedPomodoros")]);
	m_completed_pomodoros_isSet =
	    !json[QString("completedPomodoros")].isNull() && m_completed_pomodoros_isValid;

	m_total_pomodoros_isValid = ::OpenAPI::fromJsonValue(
	    m_total_pomodoros, json[QString("totalPomodoros")]);
	m_total_pomodoros_isSet = !json[QString("totalPomodoros")].isNull() && m_total_pomodoros_isValid;

	m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
	m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

	m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
	m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

	m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
	m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

	m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
	m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

	m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
	m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

	m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
	m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAITask_managementTask::asJson() const
{
	QJsonObject obj = this->asJsonObject();
	QJsonDocument doc(obj);
	QByteArray bytes = doc.toJson();
	return QString(bytes);
}

QJsonObject OAITask_managementTask::asJsonObject() const
{
	QJsonObject obj;
	if (m_task_id_isSet) {
		obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
	}
	if (m_user_id_isSet) {
		obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
	}
	if (m_group_id_isSet) {
		obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
	}
	if (m_icon_isSet) {
		obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
	}
	if (m_name_isSet) {
		obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
	}
	if (m_description_isSet) {
		obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
	}
	if (m_completed_pomodoros_isSet) {
		obj.insert(QString("completedPomodoros"), ::OpenAPI::toJsonValue(m_completed_pomodoros));
	}
	if (m_total_pomodoros_isSet) {
		obj.insert(QString("totalPomodoros"), ::OpenAPI::toJsonValue(m_total_pomodoros));
	}
	if (m_progress_isSet) {
		obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
	}
	if (m_priority.isSet()) {
		obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
	}
	if (m_status.isSet()) {
		obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
	}
	if (m_deadline_isSet) {
		obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
	}
	if (m_created_at_isSet) {
		obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
	}
	if (m_updated_at_isSet) {
		obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
	}
	return obj;
}

QString OAITask_managementTask::getTaskId() const
{
	return m_task_id;
}

void OAITask_managementTask::setTaskId(const QString &task_id)
{
	m_task_id = task_id;
	m_task_id_isSet = true;
}

bool OAITask_managementTask::is_task_id_Set() const
{
	return m_task_id_isSet;
}

bool OAITask_managementTask::is_task_id_Valid() const
{
	return m_task_id_isValid;
}

QString OAITask_managementTask::getUserId() const
{
	return m_user_id;
}

void OAITask_managementTask::setUserId(const QString &user_id)
{
	m_user_id = user_id;
	m_user_id_isSet = true;
}

bool OAITask_managementTask::is_user_id_Set() const
{
	return m_user_id_isSet;
}

bool OAITask_managementTask::is_user_id_Valid() const
{
	return m_user_id_isValid;
}

QString OAITask_managementTask::getGroupId() const
{
	return m_group_id;
}

void OAITask_managementTask::setGroupId(const QString &group_id)
{
	m_group_id = group_id;
	m_group_id_isSet = true;
}

bool OAITask_managementTask::is_group_id_Set() const
{
	return m_group_id_isSet;
}

bool OAITask_managementTask::is_group_id_Valid() const
{
	return m_group_id_isValid;
}

QString OAITask_managementTask::getIcon() const
{
	return m_icon;
}

void OAITask_managementTask::setIcon(const QString &icon)
{
	m_icon = icon;
	m_icon_isSet = true;
}

bool OAITask_managementTask::is_icon_Set() const
{
	return m_icon_isSet;
}

bool OAITask_managementTask::is_icon_Valid() const
{
	return m_icon_isValid;
}

QString OAITask_managementTask::getName() const
{
	return m_name;
}

void OAITask_managementTask::setName(const QString &name)
{
	m_name = name;
	m_name_isSet = true;
}

bool OAITask_managementTask::is_name_Set() const
{
	return m_name_isSet;
}

bool OAITask_managementTask::is_name_Valid() const
{
	return m_name_isValid;
}

QString OAITask_managementTask::getDescription() const
{
	return m_description;
}

void OAITask_managementTask::setDescription(const QString &description)
{
	m_description = description;
	m_description_isSet = true;
}

bool OAITask_managementTask::is_description_Set() const
{
	return m_description_isSet;
}

bool OAITask_managementTask::is_description_Valid() const
{
	return m_description_isValid;
}

qint32 OAITask_managementTask::getCompletedPomodoros() const
{
	return m_completed_pomodoros;
}

void OAITask_managementTask::setCompletedPomodoros(const qint32 &completed_pomodoros)
{
	m_completed_pomodoros = completed_pomodoros;
	m_completed_pomodoros_isSet = true;
}

bool OAITask_managementTask::is_completed_pomodoros_Set() const
{
	return m_completed_pomodoros_isSet;
}

bool OAITask_managementTask::is_completed_pomodoros_Valid() const
{
	return m_completed_pomodoros_isValid;
}

qint32 OAITask_managementTask::getTotalPomodoros() const
{
	return m_total_pomodoros;
}

void OAITask_managementTask::setTotalPomodoros(const qint32 &total_pomodoros)
{
	m_total_pomodoros = total_pomodoros;
	m_total_pomodoros_isSet = true;
}

bool OAITask_managementTask::is_total_pomodoros_Set() const
{
	return m_total_pomodoros_isSet;
}

bool OAITask_managementTask::is_total_pomodoros_Valid() const
{
	return m_total_pomodoros_isValid;
}

qint32 OAITask_managementTask::getProgress() const
{
	return m_progress;
}

void OAITask_managementTask::setProgress(const qint32 &progress)
{
	m_progress = progress;
	m_progress_isSet = true;
}

bool OAITask_managementTask::is_progress_Set() const
{
	return m_progress_isSet;
}

bool OAITask_managementTask::is_progress_Valid() const
{
	return m_progress_isValid;
}

OAITask_managementTaskPriority OAITask_managementTask::getPriority() const
{
	return m_priority;
}

void OAITask_managementTask::setPriority(const OAITask_managementTaskPriority &priority)
{
	m_priority = priority;
	m_priority_isSet = true;
}

bool OAITask_managementTask::is_priority_Set() const
{
	return m_priority_isSet;
}

bool OAITask_managementTask::is_priority_Valid() const
{
	return m_priority_isValid;
}

OAITask_managementTaskStatus OAITask_managementTask::getStatus() const
{
	return m_status;
}

void OAITask_managementTask::setStatus(const OAITask_managementTaskStatus &status)
{
	m_status = status;
	m_status_isSet = true;
}

bool OAITask_managementTask::is_status_Set() const
{
	return m_status_isSet;
}

bool OAITask_managementTask::is_status_Valid() const
{
	return m_status_isValid;
}

QDateTime OAITask_managementTask::getDeadline() const
{
	return m_deadline;
}

void OAITask_managementTask::setDeadline(const QDateTime &deadline)
{
	m_deadline = deadline;
	m_deadline_isSet = true;
}

bool OAITask_managementTask::is_deadline_Set() const
{
	return m_deadline_isSet;
}

bool OAITask_managementTask::is_deadline_Valid() const
{
	return m_deadline_isValid;
}

QDateTime OAITask_managementTask::getCreatedAt() const
{
	return m_created_at;
}

void OAITask_managementTask::setCreatedAt(const QDateTime &created_at)
{
	m_created_at = created_at;
	m_created_at_isSet = true;
}

bool OAITask_managementTask::is_created_at_Set() const
{
	return m_created_at_isSet;
}

bool OAITask_managementTask::is_created_at_Valid() const
{
	return m_created_at_isValid;
}

QDateTime OAITask_managementTask::getUpdatedAt() const
{
	return m_updated_at;
}

void OAITask_managementTask::setUpdatedAt(const QDateTime &updated_at)
{
	m_updated_at = updated_at;
	m_updated_at_isSet = true;
}

bool OAITask_managementTask::is_updated_at_Set() const
{
	return m_updated_at_isSet;
}

bool OAITask_managementTask::is_updated_at_Valid() const
{
	return m_updated_at_isValid;
}

bool OAITask_managementTask::isSet() const
{
	bool isObjectUpdated = false;
	do {
		if (m_task_id_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_user_id_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_group_id_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_icon_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_name_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_description_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_completed_pomodoros_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_total_pomodoros_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_progress_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_priority.isSet()) {
			isObjectUpdated = true;
			break;
		}

		if (m_status.isSet()) {
			isObjectUpdated = true;
			break;
		}

		if (m_deadline_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_created_at_isSet) {
			isObjectUpdated = true;
			break;
		}

		if (m_updated_at_isSet) {
			isObjectUpdated = true;
			break;
		}
	} while (false);
	return isObjectUpdated;
}

bool OAITask_managementTask::isValid() const
{
	// only required properties are required for the object to be considered valid
	return true;
}

} // namespace OpenAPI
