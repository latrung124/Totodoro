/**
 * task_management_service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask_managementCreateTaskGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask_managementCreateTaskGroupRequest::OAITask_managementCreateTaskGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask_managementCreateTaskGroupRequest::OAITask_managementCreateTaskGroupRequest() {
    this->initializeModel();
}

OAITask_managementCreateTaskGroupRequest::~OAITask_managementCreateTaskGroupRequest() {}

void OAITask_managementCreateTaskGroupRequest::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_deadline_isSet = false;
    m_deadline_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_tasks_isSet = false;
    m_total_tasks_isValid = false;
}

void OAITask_managementCreateTaskGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask_managementCreateTaskGroupRequest::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
    m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_tasks_isValid = ::OpenAPI::fromJsonValue(m_total_tasks, json[QString("totalTasks")]);
    m_total_tasks_isSet = !json[QString("totalTasks")].isNull() && m_total_tasks_isValid;
}

QString OAITask_managementCreateTaskGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask_managementCreateTaskGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_deadline_isSet) {
        obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_tasks_isSet) {
        obj.insert(QString("totalTasks"), ::OpenAPI::toJsonValue(m_total_tasks));
    }
    return obj;
}

QString OAITask_managementCreateTaskGroupRequest::getUserId() const {
    return m_user_id;
}
void OAITask_managementCreateTaskGroupRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAITask_managementCreateTaskGroupRequest::getIcon() const {
    return m_icon;
}
void OAITask_managementCreateTaskGroupRequest::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAITask_managementCreateTaskGroupRequest::getName() const {
    return m_name;
}
void OAITask_managementCreateTaskGroupRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITask_managementCreateTaskGroupRequest::getDescription() const {
    return m_description;
}
void OAITask_managementCreateTaskGroupRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAITask_managementCreateTaskGroupRequest::getDeadline() const {
    return m_deadline;
}
void OAITask_managementCreateTaskGroupRequest::setDeadline(const QDateTime &deadline) {
    m_deadline = deadline;
    m_deadline_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_deadline_Set() const{
    return m_deadline_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_deadline_Valid() const{
    return m_deadline_isValid;
}

OAITask_managementTaskGroupPriority OAITask_managementCreateTaskGroupRequest::getPriority() const {
    return m_priority;
}
void OAITask_managementCreateTaskGroupRequest::setPriority(const OAITask_managementTaskGroupPriority &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_priority_Valid() const{
    return m_priority_isValid;
}

OAITask_managementTaskGroupStatus OAITask_managementCreateTaskGroupRequest::getStatus() const {
    return m_status;
}
void OAITask_managementCreateTaskGroupRequest::setStatus(const OAITask_managementTaskGroupStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAITask_managementCreateTaskGroupRequest::getTotalTasks() const {
    return m_total_tasks;
}
void OAITask_managementCreateTaskGroupRequest::setTotalTasks(const qint32 &total_tasks) {
    m_total_tasks = total_tasks;
    m_total_tasks_isSet = true;
}

bool OAITask_managementCreateTaskGroupRequest::is_total_tasks_Set() const{
    return m_total_tasks_isSet;
}

bool OAITask_managementCreateTaskGroupRequest::is_total_tasks_Valid() const{
    return m_total_tasks_isValid;
}

bool OAITask_managementCreateTaskGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask_managementCreateTaskGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
