/**
 * pomodoro_service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPomodoroServiceCreateSessionBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPomodoroServiceCreateSessionBody::OAIPomodoroServiceCreateSessionBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPomodoroServiceCreateSessionBody::OAIPomodoroServiceCreateSessionBody() {
    this->initializeModel();
}

OAIPomodoroServiceCreateSessionBody::~OAIPomodoroServiceCreateSessionBody() {}

void OAIPomodoroServiceCreateSessionBody::initializeModel() {

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_session_type_isSet = false;
    m_session_type_isValid = false;

    m_number_in_cycle_isSet = false;
    m_number_in_cycle_isValid = false;
}

void OAIPomodoroServiceCreateSessionBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPomodoroServiceCreateSessionBody::fromJsonObject(QJsonObject json) {

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_session_type_isValid = ::OpenAPI::fromJsonValue(m_session_type, json[QString("sessionType")]);
    m_session_type_isSet = !json[QString("sessionType")].isNull() && m_session_type_isValid;

    m_number_in_cycle_isValid = ::OpenAPI::fromJsonValue(m_number_in_cycle, json[QString("numberInCycle")]);
    m_number_in_cycle_isSet = !json[QString("numberInCycle")].isNull() && m_number_in_cycle_isValid;
}

QString OAIPomodoroServiceCreateSessionBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPomodoroServiceCreateSessionBody::asJsonObject() const {
    QJsonObject obj;
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_session_type.isSet()) {
        obj.insert(QString("sessionType"), ::OpenAPI::toJsonValue(m_session_type));
    }
    if (m_number_in_cycle_isSet) {
        obj.insert(QString("numberInCycle"), ::OpenAPI::toJsonValue(m_number_in_cycle));
    }
    return obj;
}

QString OAIPomodoroServiceCreateSessionBody::getTaskId() const {
    return m_task_id;
}
void OAIPomodoroServiceCreateSessionBody::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIPomodoroServiceCreateSessionBody::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIPomodoroServiceCreateSessionBody::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QDateTime OAIPomodoroServiceCreateSessionBody::getStartTime() const {
    return m_start_time;
}
void OAIPomodoroServiceCreateSessionBody::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPomodoroServiceCreateSessionBody::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPomodoroServiceCreateSessionBody::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIPomodoro_serviceSessionType OAIPomodoroServiceCreateSessionBody::getSessionType() const {
    return m_session_type;
}
void OAIPomodoroServiceCreateSessionBody::setSessionType(const OAIPomodoro_serviceSessionType &session_type) {
    m_session_type = session_type;
    m_session_type_isSet = true;
}

bool OAIPomodoroServiceCreateSessionBody::is_session_type_Set() const{
    return m_session_type_isSet;
}

bool OAIPomodoroServiceCreateSessionBody::is_session_type_Valid() const{
    return m_session_type_isValid;
}

qint32 OAIPomodoroServiceCreateSessionBody::getNumberInCycle() const {
    return m_number_in_cycle;
}
void OAIPomodoroServiceCreateSessionBody::setNumberInCycle(const qint32 &number_in_cycle) {
    m_number_in_cycle = number_in_cycle;
    m_number_in_cycle_isSet = true;
}

bool OAIPomodoroServiceCreateSessionBody::is_number_in_cycle_Set() const{
    return m_number_in_cycle_isSet;
}

bool OAIPomodoroServiceCreateSessionBody::is_number_in_cycle_Valid() const{
    return m_number_in_cycle_isValid;
}

bool OAIPomodoroServiceCreateSessionBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_in_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPomodoroServiceCreateSessionBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
