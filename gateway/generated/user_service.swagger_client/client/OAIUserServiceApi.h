/**
 * user_service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserServiceApi_H
#define OAI_OAIUserServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRpcStatus.h"
#include "OAIUserServiceUpdateSettingsBody.h"
#include "OAIUserServiceUpdateUserBody.h"
#include "OAIUser_serviceCreateUserRequest.h"
#include "OAIUser_serviceCreateUserResponse.h"
#include "OAIUser_serviceGetSettingsResponse.h"
#include "OAIUser_serviceGetUserResponse.h"
#include "OAIUser_serviceUpdateSettingsResponse.h"
#include "OAIUser_serviceUpdateUserResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserServiceApi : public QObject {
    Q_OBJECT

public:
    OAIUserServiceApi(const int timeOut = 0);
    ~OAIUserServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIUser_serviceCreateUserRequest [required]
    */
    void userServiceCreateUser(const OAIUser_serviceCreateUserRequest &body);

    /**
    * @param[in]  user_id QString [required]
    */
    void userServiceGetSettings(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    void userServiceGetUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  body OAIUserServiceUpdateSettingsBody [required]
    */
    void userServiceUpdateSettings(const QString &user_id, const OAIUserServiceUpdateSettingsBody &body);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  body OAIUserServiceUpdateUserBody [required]
    */
    void userServiceUpdateUser(const QString &user_id, const OAIUserServiceUpdateUserBody &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void userServiceCreateUserCallback(OAIHttpRequestWorker *worker);
    void userServiceGetSettingsCallback(OAIHttpRequestWorker *worker);
    void userServiceGetUserCallback(OAIHttpRequestWorker *worker);
    void userServiceUpdateSettingsCallback(OAIHttpRequestWorker *worker);
    void userServiceUpdateUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void userServiceCreateUserSignal(OAIUser_serviceCreateUserResponse summary);
    void userServiceGetSettingsSignal(OAIUser_serviceGetSettingsResponse summary);
    void userServiceGetUserSignal(OAIUser_serviceGetUserResponse summary);
    void userServiceUpdateSettingsSignal(OAIUser_serviceUpdateSettingsResponse summary);
    void userServiceUpdateUserSignal(OAIUser_serviceUpdateUserResponse summary);


    void userServiceCreateUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_serviceCreateUserResponse summary);
    void userServiceGetSettingsSignalFull(OAIHttpRequestWorker *worker, OAIUser_serviceGetSettingsResponse summary);
    void userServiceGetUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_serviceGetUserResponse summary);
    void userServiceUpdateSettingsSignalFull(OAIHttpRequestWorker *worker, OAIUser_serviceUpdateSettingsResponse summary);
    void userServiceUpdateUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_serviceUpdateUserResponse summary);

    Q_DECL_DEPRECATED_X("Use userServiceCreateUserSignalError() instead")
    void userServiceCreateUserSignalE(OAIUser_serviceCreateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceCreateUserSignalError(OAIUser_serviceCreateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceGetSettingsSignalError() instead")
    void userServiceGetSettingsSignalE(OAIUser_serviceGetSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceGetSettingsSignalError(OAIUser_serviceGetSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceGetUserSignalError() instead")
    void userServiceGetUserSignalE(OAIUser_serviceGetUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceGetUserSignalError(OAIUser_serviceGetUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceUpdateSettingsSignalError() instead")
    void userServiceUpdateSettingsSignalE(OAIUser_serviceUpdateSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceUpdateSettingsSignalError(OAIUser_serviceUpdateSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceUpdateUserSignalError() instead")
    void userServiceUpdateUserSignalE(OAIUser_serviceUpdateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceUpdateUserSignalError(OAIUser_serviceUpdateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use userServiceCreateUserSignalErrorFull() instead")
    void userServiceCreateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceCreateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceGetSettingsSignalErrorFull() instead")
    void userServiceGetSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceGetSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceGetUserSignalErrorFull() instead")
    void userServiceGetUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceGetUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceUpdateSettingsSignalErrorFull() instead")
    void userServiceUpdateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceUpdateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userServiceUpdateUserSignalErrorFull() instead")
    void userServiceUpdateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userServiceUpdateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
